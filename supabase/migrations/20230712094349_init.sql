-- Profiles table for public user info (for assignment dropdown)
create table if not exists profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  email text
);

-- Enable RLS and allow all users to read profiles
alter table profiles enable row level security;

create policy "Allow all users to read profiles"
  on profiles for select
  using (true);

-- Backfill profiles for existing users
insert into public.profiles (id, email)
select id, email
from auth.users
where id not in (select id from public.profiles);

-- Trigger to sync new users to profiles
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, email)
  values (new.id, new.email);
  return new;
end;
$$ language plpgsql security definer;

drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
after insert on auth.users
for each row execute procedure public.handle_new_user();

-- Todos table
create table if not exists todos (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  task text check (char_length(task) > 3),
  is_complete boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  assigned_to uuid references auth.users,
  due_date date
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for
    insert with check (auth.uid() = user_id or auth.uid() = assigned_to);

create policy "Individuals can view their own todos or assigned todos." on todos for
    select using (auth.uid() = user_id or auth.uid() = assigned_to);

create policy "Individuals can update their own todos or assigned todos." on todos for
    update using (auth.uid() = user_id or auth.uid() = assigned_to);

create policy "Individuals can delete their own todos." on todos for
    delete using (auth.uid() = user_id);

-- Notifications table for real-time task assignment alerts
create table if not exists notifications (
  id bigint generated by default as identity primary key,
  recipient_id uuid references auth.users not null,
  sender_id uuid references auth.users not null,
  todo_id bigint references todos(id),
  message text,
  is_read boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table notifications enable row level security;

create policy "Individuals can view their notifications." on notifications for
    select using (auth.uid() = recipient_id);

create policy "Individuals can insert notifications for others." on notifications for
    insert with check (true);